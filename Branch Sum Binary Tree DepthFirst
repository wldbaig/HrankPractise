using System;
using System.Collections.Generic;

public class Program {
	// This is the class of the input root. Do not edit it.
	public class BinaryTree {
		public int value;
		public BinaryTree left;
		public BinaryTree right;

		public BinaryTree(int value) {
			this.value = value;
			this.left = null;
			this.right = null;
		}
	}

	public static List<int> BranchSums(BinaryTree root) {
		
    /*
    
  Write a function that takes in a Binary Tree and returns a list of its branch
  sums ordered from leftmost branch sum to rightmost branch sum.
  
  
  A branch sum is the sum of all values in a Binary Tree branch. A Binary Tree
  branch is a path of nodes in a tree that starts at the root node and ends at
  any leaf node.
  
  Sample Input:
  
           1
        /     \
       2       3
     /   \    /  \
    4     5  6    7
  /   \  /
 8    9 10
 
 Sample OutPut: 
 
 [15, 16, 18, 10, 11]
    */
    
    
		List<int> sums = new List<int>();
		calculateBranchSum(root, 0, sums);
		
		return sums;
	}
	
	public static void 	calculateBranchSum(BinaryTree node, int runningsum, List<int> sums){
		
		if(node == null){
			return;
		}
		int newRunningSum = node.value + runningsum;
		if(node.left == null && node.right == null){
			sums.Add(newRunningSum);
			return;
		}
		calculateBranchSum(node.left, newRunningSum, sums);
		calculateBranchSum(node.right, newRunningSum, sums);
	}
}
